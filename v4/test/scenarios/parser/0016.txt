-- given a set of assumptions associated with a declaration
import file:./lib/List as List;

fold op i xs =
    if List.isNil xs then
        List.nil
    else
        fold op (op i List.head) List.tail
assumptions {
    fold (+) 0 List.nil == 0;
    fold (+) 1 (List.cons 1 (List.cons 2 (List.cons 3 List.nil))) == 6
};
-- ast
{
  "type": "MODULE",
  "sourceName": "stream",
  "imports": [
    {
      "type": "IMPORT",
      "url": {
        "type": "CONSTANT_URL",
        "value": "file:./lib/List"
      },
      "id": {
        "type": "IDENTIFIER",
        "name": "List"
      }
    }
  ],
  "declarations": [
    {
      "type": "DECLARATION",
      "name": "fold",
      "expression": {
        "type": "LAMBDA",
        "variable": "op",
        "expression": {
          "type": "LAMBDA",
          "variable": "i",
          "expression": {
            "type": "LAMBDA",
            "variable": "xs",
            "expression": {
              "type": "IF",
              "ifExpr": {
                "type": "APPLY",
                "operation": {
                  "type": "QUALIFIED_IDENTIFIER",
                  "module": "List",
                  "identifier": "isNil"
                },
                "operand": {
                  "type": "IDENTIFIER",
                  "name": "xs"
                }
              },
              "thenExpr": {
                "type": "QUALIFIED_IDENTIFIER",
                "module": "List",
                "identifier": "nil"
              },
              "elseExpr": {
                "type": "APPLY",
                "operation": {
                  "type": "APPLY",
                  "operation": {
                    "type": "APPLY",
                    "operation": {
                      "type": "IDENTIFIER",
                      "name": "fold"
                    },
                    "operand": {
                      "type": "IDENTIFIER",
                      "name": "op"
                    }
                  },
                  "operand": {
                    "type": "APPLY",
                    "operation": {
                      "type": "APPLY",
                      "operation": {
                        "type": "IDENTIFIER",
                        "name": "op"
                      },
                      "operand": {
                        "type": "IDENTIFIER",
                        "name": "i"
                      }
                    },
                    "operand": {
                      "type": "QUALIFIED_IDENTIFIER",
                      "module": "List",
                      "identifier": "head"
                    }
                  }
                },
                "operand": {
                  "type": "QUALIFIED_IDENTIFIER",
                  "module": "List",
                  "identifier": "tail"
                }
              }
            }
          }
        }
      },
      "assumptions": [
        {
          "type": "ASSUMPTION",
          "sourceName": "stream",
          "line": 9,
          "text": "fold (+) 0 List.nil == 0",
          "expression": {
            "type": "EQUAL",
            "left": {
              "type": "APPLY",
              "operation": {
                "type": "APPLY",
                "operation": {
                  "type": "APPLY",
                  "operation": {
                    "type": "IDENTIFIER",
                    "name": "fold"
                  },
                  "operand": {
                    "type": "INFIX_OPERATOR",
                    "operator": "+"
                  }
                },
                "operand": {
                  "type": "CONSTANT_INTEGER",
                  "value": 0
                }
              },
              "operand": {
                "type": "QUALIFIED_IDENTIFIER",
                "module": "List",
                "identifier": "nil"
              }
            },
            "right": {
              "type": "CONSTANT_INTEGER",
              "value": 0
            }
          }
        },
        {
          "type": "ASSUMPTION",
          "sourceName": "stream",
          "line": 10,
          "text": "fold (+) 1 (List.cons 1 (List.cons 2 (List.cons 3 List.nil))) == 6",
          "expression": {
            "type": "EQUAL",
            "left": {
              "type": "APPLY",
              "operation": {
                "type": "APPLY",
                "operation": {
                  "type": "APPLY",
                  "operation": {
                    "type": "IDENTIFIER",
                    "name": "fold"
                  },
                  "operand": {
                    "type": "INFIX_OPERATOR",
                    "operator": "+"
                  }
                },
                "operand": {
                  "type": "CONSTANT_INTEGER",
                  "value": 1
                }
              },
              "operand": {
                "type": "APPLY",
                "operation": {
                  "type": "APPLY",
                  "operation": {
                    "type": "QUALIFIED_IDENTIFIER",
                    "module": "List",
                    "identifier": "cons"
                  },
                  "operand": {
                    "type": "CONSTANT_INTEGER",
                    "value": 1
                  }
                },
                "operand": {
                  "type": "APPLY",
                  "operation": {
                    "type": "APPLY",
                    "operation": {
                      "type": "QUALIFIED_IDENTIFIER",
                      "module": "List",
                      "identifier": "cons"
                    },
                    "operand": {
                      "type": "CONSTANT_INTEGER",
                      "value": 2
                    }
                  },
                  "operand": {
                    "type": "APPLY",
                    "operation": {
                      "type": "APPLY",
                      "operation": {
                        "type": "QUALIFIED_IDENTIFIER",
                        "module": "List",
                        "identifier": "cons"
                      },
                      "operand": {
                        "type": "CONSTANT_INTEGER",
                        "value": 3
                      }
                    },
                    "operand": {
                      "type": "QUALIFIED_IDENTIFIER",
                      "module": "List",
                      "identifier": "nil"
                    }
                  }
                }
              }
            },
            "right": {
              "type": "CONSTANT_INTEGER",
              "value": 6
            }
          }
        }
      ]
    }
  ],
  "expression": {
    "type": "CONSTANT_UNIT"
  }
}