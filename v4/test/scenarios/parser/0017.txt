-- given a definition with a number of let expressions
fold op i xs =
    let {
        isListEmpty = List.isNil xs;
        head = List.head xs;
        tail = List.tail xs
    } in
        if isListEmpty then
            List.Nil
        else
            fold op (op i head) tail;
-- ast
{
  "type": "MODULE",
  "sourceName": "stream",
  "imports": [],
  "declarations": [
    {
      "type": "DECLARATION",
      "name": "fold",
      "expression": {
        "type": "LAMBDA",
        "variables": [
          "op",
          "i",
          "xs"
        ],
        "expression": {
          "type": "SCOPE",
          "declarations": [
            {
              "type": "DECLARATION",
              "name": "isListEmpty",
              "expression": {
                "type": "APPLY",
                "operation": {
                  "type": "QUALIFIED_IDENTIFIER",
                  "module": "List",
                  "identifier": "isNil"
                },
                "operand": {
                  "type": "IDENTIFIER",
                  "name": "xs"
                }
              },
              "assumptions": []
            },
            {
              "type": "DECLARATION",
              "name": "head",
              "expression": {
                "type": "APPLY",
                "operation": {
                  "type": "QUALIFIED_IDENTIFIER",
                  "module": "List",
                  "identifier": "head"
                },
                "operand": {
                  "type": "IDENTIFIER",
                  "name": "xs"
                }
              },
              "assumptions": []
            },
            {
              "type": "DECLARATION",
              "name": "tail",
              "expression": {
                "type": "APPLY",
                "operation": {
                  "type": "QUALIFIED_IDENTIFIER",
                  "module": "List",
                  "identifier": "tail"
                },
                "operand": {
                  "type": "IDENTIFIER",
                  "name": "xs"
                }
              },
              "assumptions": []
            }
          ],
          "expression": {
            "type": "IF",
            "ifExpr": {
              "type": "IDENTIFIER",
              "name": "isListEmpty"
            },
            "thenExpr": {
              "type": "QUALIFIED_IDENTIFIER",
              "module": "List",
              "identifier": "Nil"
            },
            "elseExpr": {
              "type": "APPLY",
              "operation": {
                "type": "APPLY",
                "operation": {
                  "type": "APPLY",
                  "operation": {
                    "type": "IDENTIFIER",
                    "name": "fold"
                  },
                  "operand": {
                    "type": "IDENTIFIER",
                    "name": "op"
                  }
                },
                "operand": {
                  "type": "APPLY",
                  "operation": {
                    "type": "APPLY",
                    "operation": {
                      "type": "IDENTIFIER",
                      "name": "op"
                    },
                    "operand": {
                      "type": "IDENTIFIER",
                      "name": "i"
                    }
                  },
                  "operand": {
                    "type": "IDENTIFIER",
                    "name": "head"
                  }
                }
              },
              "operand": {
                "type": "IDENTIFIER",
                "name": "tail"
              }
            }
          }
        }
      },
      "assumptions": []
    }
  ],
  "expression": {
    "type": "CONSTANT_UNIT"
  }
}