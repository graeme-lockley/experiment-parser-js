-- given a list, calculate the list's length
import file:./lib/ListHelper as List;

myList = List.cons 1 (List.cons 2 (List.cons 3 List.empty));

length xs =
    if List.isEmpty xs then
        0
    else
        1 + length (List.tail xs);
-- ast
{
  "type": "MODULE",
  "sourceName": "stream",
  "imports": [
    {
      "type": "IMPORT",
      "url": {
        "type": "CONSTANT_URL",
        "value": "file:./lib/ListHelper"
      },
      "id": {
        "type": "IDENTIFIER",
        "name": "List"
      }
    }
  ],
  "declarations": [
    {
      "type": "DECLARATION",
      "name": "myList",
      "expression": {
        "type": "APPLY",
        "operation": {
          "type": "APPLY",
          "operation": {
            "type": "QUALIFIED_IDENTIFIER",
            "module": "List",
            "identifier": "cons"
          },
          "operand": {
            "type": "CONSTANT_INTEGER",
            "value": 1
          }
        },
        "operand": {
          "type": "APPLY",
          "operation": {
            "type": "APPLY",
            "operation": {
              "type": "QUALIFIED_IDENTIFIER",
              "module": "List",
              "identifier": "cons"
            },
            "operand": {
              "type": "CONSTANT_INTEGER",
              "value": 2
            }
          },
          "operand": {
            "type": "APPLY",
            "operation": {
              "type": "APPLY",
              "operation": {
                "type": "QUALIFIED_IDENTIFIER",
                "module": "List",
                "identifier": "cons"
              },
              "operand": {
                "type": "CONSTANT_INTEGER",
                "value": 3
              }
            },
            "operand": {
              "type": "QUALIFIED_IDENTIFIER",
              "module": "List",
              "identifier": "empty"
            }
          }
        }
      },
      "assumptions": []
    },
    {
      "type": "DECLARATION",
      "name": "length",
      "expression": {
        "type": "LAMBDA",
        "variable": "xs",
        "expression": {
          "type": "IF",
          "ifExpr": {
            "type": "APPLY",
            "operation": {
              "type": "QUALIFIED_IDENTIFIER",
              "module": "List",
              "identifier": "isEmpty"
            },
            "operand": {
              "type": "IDENTIFIER",
              "name": "xs"
            }
          },
          "thenExpr": {
            "type": "CONSTANT_INTEGER",
            "value": 0
          },
          "elseExpr": {
            "type": "ADDITION",
            "left": {
              "type": "CONSTANT_INTEGER",
              "value": 1
            },
            "right": {
              "type": "APPLY",
              "operation": {
                "type": "IDENTIFIER",
                "name": "length"
              },
              "operand": {
                "type": "APPLY",
                "operation": {
                  "type": "QUALIFIED_IDENTIFIER",
                  "module": "List",
                  "identifier": "tail"
                },
                "operand": {
                  "type": "IDENTIFIER",
                  "name": "xs"
                }
              }
            }
          }
        }
      },
      "assumptions": []
    }
  ],
  "expression": {
    "type": "CONSTANT_UNIT"
  }
}
-- js
const List = require('./lib/ListHelper');

const myList = List.cons(1)(List.cons(2)(List.cons(3)(List.empty)));

function length(xs) {
  return (List.isEmpty(xs)
    ? 0
    : (1 + length(List.tail(xs))));
}

const _$EXPR = undefined;

const _$ASSUMPTIONS = [].concat(
  List._$ASSUMPTIONS || []);

_$ASSUMPTIONS.push({
  source: 'stream',
  declarations: [

  ]
});


module.exports = {
  myList,
  length,
  _$EXPR,
  _$ASSUMPTIONS
};
-- run
length myList == 3