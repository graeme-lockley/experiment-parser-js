-- given a set of assumptions associated with a declaration
import file:./lib/List as List;

fold op i xs =
    if List.isEmpty xs then
        List.empty
    else
        fold op (op i List.head) List.tail
assumptions {
    fold (+) 0 List.empty == 0;
    fold (+) 1 (List.cons 1 (List.cons 2 (List.cons 3 List.empty))) == 6
};
-- js
const List = require('./lib/List');

function fold(op) {
  return (i => (xs => (List.isEmpty(xs)
    ? List.empty
    : fold(op)(op(i)(List.head))(List.tail))));
}

const _$EXPR = undefined;

const _$ASSUMPTIONS = [].concat(
  List._$ASSUMPTIONS || []);

_$ASSUMPTIONS.push({
  source: 'stream',
  declarations: [
    {
      name: 'fold',
      predicates: [
        {
          line: 9,
          source: 'stream',
          text: 'fold (+) 0 List.empty == 0',
          predicate: () => (fold((_$a => (_$b => (_$a + _$b))))(0)(List.empty) == 0)
        },
        {
          line: 10,
          source: 'stream',
          text: 'fold (+) 1 (List.cons 1 (List.cons 2 (List.cons 3 List.empty))) == 6',
          predicate: () => (fold((_$a => (_$b => (_$a + _$b))))(1)(List.cons(1)(List.cons(2)(List.cons(3)(List.empty)))) == 6)
        }
      ]
    }
  ]
});


module.exports = {
  fold,
  _$EXPR,
  _$ASSUMPTIONS
};